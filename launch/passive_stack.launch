<launch>
    <arg name="bond_id_namespace" default="safety_bonds" />
    <arg name="sim" default="false" doc="true if we are running in the sim" />
    <arg name="fake_bat" default="false" doc="create a fake motor battery publisher" />

    <include file="$(find iarc7_launch)/launch/base_hardware.launch">
        <arg name="sim" value="$(arg sim)" />
        <arg name="bond_id_namespace" value="$(arg bond_id_namespace)" />
    </include>

    <include file="$(find iarc7_launch)/launch/localization.launch" />

    <include file="$(find iarc7_sensors)/launch/obstacle_detector.launch" />

    <include file="$(find iarc7_vision)/launch/vision_node.launch">
        <arg name="platform" value="1.0" unless="$(arg sim)" />
        <arg name="platform" value="sim" if="$(arg sim)" />
    </include>

    <include file="$(find iarc7_sensors)/launch/roomba_transform_filter.launch"/>

    <include file="$(find iarc7_sensors)/launch/vel_filter.launch">
        <arg name="bond_id_namespace" value="$(arg bond_id_namespace)" />
        <arg name="position_passthrough" value="$(arg sim)" />
    </include>

    <!-- if we need a fake battery publisher -->
    <group if="$(arg fake_bat)">
        <node name="fake_motor_pub"
            pkg="rostopic"
            type="rostopic"
            args="pub -s /motor_battery iarc7_msgs/Float64Stamped
                    &quot;{'header': auto, 'data': 21.0}&quot;
                    -r 10" />
    </group>
    <!-- endif -->

    <node name="absolute_vel_from_switches"
        pkg="iarc7_sensors"
        type="absolute_velocity_from_switches.py" />
    <param
        name="$(arg bond_id_namespace)/absolute_switch_velocity_publisher/form_bond"
        value="true" />

    <include file="$(find iarc7_sensors)/launch/orientation_filter.launch">
        <arg name="bond_id_namespace" value="$(arg bond_id_namespace)" />
    </include>
</launch>
